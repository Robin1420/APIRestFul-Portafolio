"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import re
import pyodbc
from datetime import timedelta

# Cargar variables de entorno
from dotenv import load_dotenv

# Cargar .env si existe
env_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env')
if os.path.exists(env_path):
    load_dotenv(env_path)
else:
    load_dotenv()

# Configuración de logging
import logging
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z^bo58c#-6kpxuj)j^gtkkc!1+p=u%sdvf2&u2b-_dad-utig9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',  # Añadido para CORS
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Debe ir antes de CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuración CORS
CORS_ALLOW_ALL_ORIGINS = True  # En producción, especifica los orígenes permitidos
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React por defecto
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Si necesitas permitir todos los encabezados y métodos
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

def get_database_config():
    """Obtiene la configuración de la base de datos según el entorno."""
    # Configuración para producción (Render o con variable de entorno)
    if os.getenv('RENDER') or os.getenv('SOMEE_CONNECTION_STRING'):
        connection_string = os.getenv('SOMEE_CONNECTION_STRING')
        if not connection_string:
            raise ValueError('La variable de entorno SOMEE_CONNECTION_STRING no está configurada')

        # Mostrar información de depuración (sin contraseña)
        debug_conn_str = re.sub(r'(pwd|password)=[^;]+', 'pwd=******', connection_string, flags=re.IGNORECASE)
        logger.info(f"Configurando base de datos con: {debug_conn_str}")

        # Extraer parámetros de la cadena de conexión
        params = dict(
            re.findall(r'([^=;]+)=([^;]+)', connection_string)
        )

        # Mapeo de parámetros
        db_config = {
            'ENGINE': 'mssql',
            'HOST': params.get('data source', '').strip(),
            'PORT': '1433',  # Puerto por defecto de SQL Server
            'NAME': params.get('initial catalog', '').strip() or params.get('database', '').strip(),
            'USER': params.get('user id', '').strip(),
            'PASSWORD': params.get('pwd', '').strip(),
            'OPTIONS': {
                'driver': 'ODBC Driver 17 for SQL Server',
                'extra_params': ';'.join([
                    'TrustServerCertificate=Yes',
                    'Encrypt=Yes',
                    'Connection Timeout=30',
                    'MARS_Connection=Yes',
                ]),
            },
            'CONN_MAX_AGE': 600,  # 10 minutos de conexión persistente
        }

        # Registrar configuración (sin contraseña)
        safe_config = db_config.copy()
        if 'PASSWORD' in safe_config:
            safe_config['PASSWORD'] = '******'
        logger.info(f"Configuración de base de datos: {safe_config}")

        return {
            'default': db_config
        }
    
    # Configuración para desarrollo (SQLite)
    return {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Aplicar configuración de base de datos
DATABASES = get_database_config()

# Configuración de conexión ODBC
ODBC_CONNECTION_STRING = os.getenv('SOMEE_CONNECTION_STRING', '')
if ODBC_CONNECTION_STRING:
    # Configurar pyodbc para usar el driver correcto
    import pyodbc
    pyodbc.pooling = False  # Deshabilitar el pooling para evitar problemas

    # Extraer parámetros de la cadena de conexión
    params = dict(
        re.findall(r'([^=;]+)=([^;]+)', ODBC_CONNECTION_STRING)
    )

    server = params.get('data source', '').strip()
    database = params.get('initial catalog', '').strip() or params.get('database', '').strip()
    user = params.get('user id', '').strip()
    password = params.get('pwd', '').strip()

    if server and database and user and password:
        DATABASES = {
            'default': {
                'ENGINE': 'sql_server.pyodbc',
                'NAME': database,
                'USER': user,
                'PASSWORD': password,
                'HOST': server,
                'PORT': '1433',  # Puerto explícito para SQL Server
                'OPTIONS': {
                    'driver': 'ODBC Driver 17 for SQL Server',
                    'extra_params': 'Encrypt=yes;TrustServerCertificate=yes;',
                },
            }
        }
        logger.info(f"Configuración de base de datos: {DATABASES}")
    else:
        missing = []
        if not server: missing.append('server')
        if not database: missing.append('database')
        if not user: missing.append('user')
        if not password: missing.append('password')
        logger.error(f"Error: Faltan parámetros en la cadena de conexión: {', '.join(missing)}")
        logger.error(f"Cadena de conexión: {ODBC_CONNECTION_STRING}")

    # Registrar drivers ODBC disponibles
    try:
        drivers = pyodbc.drivers()
        logger.info(f"Drivers ODBC disponibles: {drivers}")
        
        # Configuración final de la base de datos
        DATABASES = {
            'default': {
                'ENGINE': 'mssql',
                'HOST': server,
                'PORT': '1433',
                'NAME': database,
                'USER': user,
                'PASSWORD': password,
                'OPTIONS': {
                    'driver': 'ODBC Driver 17 for SQL Server',
                    'extra_params': 'Encrypt=yes;TrustServerCertificate=yes;',
                    'unicode_results': True,
                },
                'CONN_MAX_AGE': 600,
            }
        }
        
        logger.info(f"Base de datos configurada para: {database} en {server}")
        logger.debug(f"Configuración DATABASES: {DATABASES}")
        
    except Exception as e:
        error_msg = f"Error al configurar la base de datos: {str(e)}"
        logger.error(error_msg)
        logger.error(traceback.format_exc())
        raise ValueError(error_msg)
else:
    logger.info("Modo desarrollo: Usando SQLite")

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración para archivos multimedia
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Configuración para manejo de archivos en desarrollo
if DEBUG:
    import mimetypes
    mimetypes.add_type("application/javascript", ".js", True)


# Configuración de Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}
